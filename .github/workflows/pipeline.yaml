name: Pipeline

on:
  push:
    branches:
      - 'main'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.PIPELINE_USER_AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.PIPELINE_USER_AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yml
  DEV_STACK_NAME: MovieApi-dev
  DEV_PIPELINE_EXECUTION_ROLE: arn:aws:iam::976088553851:role/aws-sam-cli-managed-dev-pipel-PipelineExecutionRole-QNPhUgG9sgsS
  DEV_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::976088553851:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionRo-qeVBsfsoGBR4
  DEV_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-r-artifactsbucket-16anus9odj8k
  DEV_REGION: eu-north-1
  PROD_STACK_NAME: MovieApi-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::976088553851:role/aws-sam-cli-managed-prod-pipe-PipelineExecutionRole-HUS3W9b3K89N
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::976088553851:role/aws-sam-cli-managed-prod--CloudFormationExecutionRo-miQEJy6EDq0P
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline--artifactsbucket-nclxmlyzlwd7
  PROD_REGION: eu-north-1

jobs:
  build-and-package:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container --mount-with WRITE

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to dev artifact buckets
        run: |
          sam package \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --region ${DEV_REGION} \
            --output-template-file packaged-dev.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-dev.yaml
          path: packaged-dev.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to prod artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-dev:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-dev.yaml

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to dev account
        run: |
          sam deploy --config-env dev \
            --stack-name ${DEV_STACK_NAME} \
            --template packaged-dev.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --role-arn ${DEV_CLOUDFORMATION_EXECUTION_ROLE}

  integration-test:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
      - name: Get outputs from the stack just created
        id: get-outputs
        run: >-
          echo "API_ENDPOINT=$(aws cloudformation \
            --region ${{ env.DEV_REGION }} describe-stacks \
            --stack-name ${{ env.DEV_STACK_NAME }} \
            --query "Stacks[0].Outputs[0].OutputValue"
          )" >> "$GITHUB_ENV"
          echo "TABLE_NAME=$(aws cloudformation \
            --region ${{ env.DEV_REGION }} describe-stacks \
            --stack-name ${{ env.DEV_STACK_NAME }} \
            --query "Stacks[0].Outputs[1].OutputValue"
          )" >> "$GITHUB_ENV"
      - name: Run Integration Tests
        working-directory: ./test/MovieApi.Tests/
        run: |
          dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --settings coverlet.runsettings
          echo "TEST_COVERAGE_PATH=$(find TestResults/*/coverage.opencover.xml | sort -nr | head -n 1)" >> "$GITHUB_ENV"
      - uses: actions/upload-artifact@v3
        with:
          name: coverage.opencover.xml
          path: ./test/MovieApi.Tests/${{ env.TEST_COVERAGE_PATH }}

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to prod account
        run: |
          sam deploy --config-env prod \
            --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}

  update-documentation:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate SBOM
        run: |
          curl -Lo $RUNNER_TEMP/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
          chmod +x $RUNNER_TEMP/sbom-tool
          $RUNNER_TEMP/sbom-tool generate -b . -bc . -pn ${{ github.repository }} -pv 1.0.0 -ps ${{ github.repository_owner }} -nsb https://sbom.mycompany.com -V Verbose
      - uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: _manifest/spdx_2.2
      - name: Upload SBOM
        uses: advanced-security/spdx-dependency-submission-action@v0.0.1
        with:
          filePath: "_manifest/spdx_2.2/"
      - name: Deploy API Documentation
        uses: bump-sh/github-action@v1
        with:
          doc: movieapi
          token: ${{ secrets.BUMP_TOKEN }}
          file: src/MovieApi/Schemas/openapi.yaml
      - uses: actions/download-artifact@v3
        with:
          name: coverage.opencover.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}