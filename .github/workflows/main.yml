name: main

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        dotnet-version: ['6.0.x' ]

    steps:
      - uses: actions/checkout@v3
      - name: Create AWS Credentials
        run: |
          mkdir -p ~/.aws
          touch ~/.aws/credentials
          echo "[default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region = eu-north-1" > ~/.aws/credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install Dependencies and Tools
        run: |
          npm ci --ignore-scripts --include=dev --loglevel=error
          dotnet restore src/MovieApi/MovieApi.csproj
          dotnet restore test/MovieApi.Tests/MovieApi.Tests.csproj
          dotnet tool install -g Amazon.Lambda.Tools

      - name: Build
        run: |
          dotnet build src/MovieApi/MovieApi.csproj --configuration Release --no-restore
          dotnet build test/MovieApi.Tests/MovieApi.Tests.csproj --configuration Release --no-restore

      - name: Package
        working-directory: ./src/MovieApi
        run: dotnet lambda package --configuration Release --framework net6.0 --output-package bin/Release/net6.0/MovieApi.zip

      - name: Deploy Test Infrastructure
        run: npm run deploy:dev

      - name: Run Integration Tests
        working-directory: ./test/MovieApi.Tests/
        run: |
          export TABLE_NAME=MoviesTable-dev
          dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" --settings coverlet.runsettings

      - name: Deploy Prod Services
        run: npm run deploy:prod

      - name: Generate SBOM
        run: |
          curl -Lo $RUNNER_TEMP/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
          chmod +x $RUNNER_TEMP/sbom-tool
          $RUNNER_TEMP/sbom-tool generate -b . -bc . -pn ${{ github.repository }} -pv 1.0.0 -ps ${{ github.repository_owner }} -nsb https://sbom.mycompany.com -V Verbose
      - uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: _manifest/spdx_2.2
      - name: SBOM upload
        uses: advanced-security/spdx-dependency-submission-action@v0.0.1
        with:
          filePath: "_manifest/spdx_2.2/"

      - name: Deploy API Documentation
        uses: bump-sh/github-action@v1
        with:
          doc: movieapi
          token: ${{ secrets.BUMP_TOKEN }}
          file: src/MovieApi/Schemas/openapi.yaml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}