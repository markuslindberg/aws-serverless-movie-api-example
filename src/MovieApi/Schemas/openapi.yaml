openapi: 3.0.1

info:
  version: 1.0.0
  title: Movie API
  description: This is a simple movie API

x-amazon-apigateway-request-validators:
  Validate All:
    validateRequestParameters: true
    validateRequestBody: true

paths:
  /movies/{movieId}:
    get:
      description: Get a movie
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMovieFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy
    put:
      description: Update a movie
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        $ref: '#/components/requestBodies/CreateOrUpdateMovieRequest'
      responses:
        '200':
          description: Successful response returning the updated movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateMovieFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy
    delete:
      description: Delete a movie
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successful response returning the deleted movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMovieFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy

  /movies:
    post:
      description: Create a movie
      requestBody:
        $ref: '#/components/requestBodies/CreateOrUpdateMovieRequest'
      responses:
        '200':
          description: Successful response returning the created movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateMovieFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy
    get:
      description: Get a list of movies
      parameters:
        - name: category
          description: Filter movies by category
          in: query
          required: true
          schema:
            type: string
        - name: year-min
          description: Filter movies by year greater or equal to year-min
          in: query
          required: false
          schema:
            type: integer
        - name: year-max
          description: Filter movies by year less or equal to year-max
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfMovies'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMoviesFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy

  /movies/{movieId}/characters:
    get:
      description: Get a list of characters for a movie
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCharacters'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMovieCharactersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy

  /movies/{movieId}/directors:
    get:
      description: Get a list of directors for a movie
      parameters:
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfDirectors'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMovieDirectorsFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy

  /characters/{characterId}/movies:
    get:
      description: Get a list of movies for a character
      parameters:
        - $ref: '#/components/parameters/characterId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfMovies'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCharacterMoviesFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy

  /directors/{directorId}/movies:
    get:
      description: Get a list of movies for a director
      parameters:
        - $ref: '#/components/parameters/directorId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfMovies'
        '400':
          $ref: '#/components/responses/DefaultErrorResponse'
        '401':
          $ref: '#/components/responses/DefaultErrorResponse'
        '403':
          $ref: '#/components/responses/DefaultErrorResponse'
        '404':
          $ref: '#/components/responses/DefaultErrorResponse'
        '422':
          $ref: '#/components/responses/DefaultErrorResponse'
        '500':
          $ref: '#/components/responses/DefaultErrorResponse'
        '502':
          $ref: '#/components/responses/DefaultErrorResponse'
        '504':
          $ref: '#/components/responses/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDirectorMoviesFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy

components:
  securitySchemes:
    sigv4:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "awsSigv4"
  parameters:
    movieId:
      name: movieId
      in: path
      description: Identifier of the movie
      required: true
      schema:
        type: string
        pattern: ^[A-Za-z0-9\\-]{1,100}$
    characterId:
      name: characterId
      in: path
      description: Identifier of the character
      required: true
      schema:
        type: string
        pattern: ^[A-Za-z0-9\\-]{1,100}$
    directorId:
      name: directorId
      in: path
      description: Identifier of the director
      required: true
      schema:
        type: string
        pattern: ^[A-Za-z0-9\\-]{1,100}$
  schemas:
    Movie:
      type: object
      additionalProperties: false
      properties:
        movieId:
          type: string
          description: Movie identifier
          minLength: 1
          maxLength: 100
          pattern: ^[A-Za-z0-9\\-]{1,100}$
        title:
          type: string
          description: Title of the movie
        year:
          type: integer
          description: Year that the movie is released
        category:
          type: string
          description: Category of the movie
        budget:
          type: string
          description: Budget in free text
        boxOffice:
          type: string
          description: Box office revenue
    Character:
      type: object
      additionalProperties: false
      properties:
        characterId:
          type: string
          description: Character identifier
          minLength: 1
          maxLength: 100
          pattern: ^[A-Za-z0-9\\-]{1,100}$
        name:
          type: string
          description: Name of the character
        playedBy:
          type: string
          description: Name of the actor playing the character
        role:
          type: string
          description: Role in the movie, i.e., protagonist or antagonist
        nationality:
          type: string
          description: Nationality of the character
    Director:
      type: object
      additionalProperties: false
      properties:
        directorId:
          type: string
          description: Director identifier
          minLength: 1
          maxLength: 100
          pattern: ^[A-Za-z0-9\\-]{1,100}$
        name:
          type: string
          description: Name of the director
    ArrayOfMovies:
      type: array
      items:
        $ref: '#/components/schemas/Movie'
    ArrayOfCharacters:
      type: array
      items:
        $ref: '#/components/schemas/Character'
    ArrayOfDirectors:
      type: array
      items:
        $ref: '#/components/schemas/Director'
  requestBodies:
    CreateOrUpdateMovieRequest:
      description: Create or Update Movie request body
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - "movieId"
              - "title"
              - "year"
              - "category"
            properties:
              movieId:
                type: string
                description: Movie identifier
                minLength: 1
                maxLength: 100
                pattern: ^[A-Za-z0-9\\-]{1,100}$
              title:
                type: string
                description: Title of the movie
              year:
                type: integer
                description: Year that the movie is released
              category:
                type: string
                description: Category of the movie
              budget:
                type: string
                description: Budget in free text
              boxOffice:
                type: string
                description: Box office revenue
  responses:
    DefaultErrorResponse:
      description: Default error response
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Error message